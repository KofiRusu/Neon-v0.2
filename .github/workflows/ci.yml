name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  MINIMUM_COVERAGE: 40

jobs:
  quality-gates:
    name: 🔍 Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🔍 TypeScript type checking
      run: npm run type-check
      
    - name: 🧹 ESLint code quality
      run: npm run lint
      
    - name: 💄 Prettier code formatting
      run: npm run format:check

  test-coverage:
    name: 🧪 Test Coverage
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🧪 Run tests with coverage
      run: npm run test:coverage
      
    - name: 📊 Coverage threshold check
      run: |
        COVERAGE=$(npm run test:coverage --silent | grep -o 'All files[^|]*|[^|]*|[^|]*|[^|]*|[^|]*' | awk -F'|' '{print $2}' | tr -d ' %')
        echo "Current coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < $MINIMUM_COVERAGE" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below minimum required $MINIMUM_COVERAGE%"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets minimum requirement $MINIMUM_COVERAGE%"
        fi
        
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build-test:
    name: 🏗️ Build & Integration Tests  
    runs-on: ubuntu-latest
    needs: [quality-gates, test-coverage]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: neonhub_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🗄️ Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/neonhub_test
      run: |
        cd packages/data-model
        npx prisma db push
        
    - name: 🏗️ Build applications
      run: npm run build
      
    - name: 🧪 Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/neonhub_test
      run: npm run test:integration
      
    - name: 🎭 Run E2E tests
      run: npm run test:e2e

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔍 Security audit
      run: npm audit --audit-level=moderate
      
    - name: 📋 License compliance check
      run: npx license-checker --summary

  performance-monitoring:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: ⚡ Bundle size analysis
      run: |
        npm run build
        npx bundlesize
        
    - name: 🚀 Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun

  deployment:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-test, security-audit]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your deployment scripts here
        
    - name: 💬 Notify deployment
      run: |
        echo "✅ Staging deployment successful"

  release:
    name: 📦 Release to Production
    runs-on: ubuntu-latest
    needs: [build-test, security-audit]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        # Add your production deployment scripts here
        
    - name: 📦 Create GitHub release
      if: contains(github.event.head_commit.message, 'release:')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## 🚀 What's Changed
          
          ${{ github.event.head_commit.message }}
          
          ## 📊 Quality Metrics
          - ✅ All tests passing
          - ✅ Coverage above ${{ env.MINIMUM_COVERAGE }}%
          - ✅ TypeScript strict mode
          - ✅ Security audit clean
        draft: false
        prerelease: false 