// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          UserRole  @default(USER)
  avatar        String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  campaigns     Campaign[]
  agentExecutions AgentExecution[]
  analytics     Analytics[]
  sessions      Session[]
  accounts      Account[]
  
  // Support Relations
  supportThreadsAsCustomer    SupportThread[]       @relation("CustomerSupport")
  supportThreadsAsAgent       SupportThread[]       @relation("AssignedSupportAgent")
  messagesSent                MessageLog[]          @relation("MessageSender")
  escalationsRequested        EscalationRequest[]   @relation("EscalationRequester")
  escalationsAssigned         EscalationRequest[]   @relation("EscalationAssignee")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Campaign Management
model Campaign {
  id          String         @id @default(cuid())
  name        String
  description String?
  type        CampaignType
  status      CampaignStatus @default(DRAFT)
  budget      Float?
  startDate   DateTime?
  endDate     DateTime?
  targetAudience Json?
  platforms   Platform[]
  metrics     Json?
  settings    Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String
  userId2     String?

  // Relations
  user        User           @relation(fields: [userId], references: [id])
  user2       User?          @relation("CampaignUser2", fields: [userId2], references: [id])
  agentExecutions AgentExecution[]
  analytics   Analytics[]
  abTests     ABTest[]

  @@map("campaigns")
}

// AI Agents
model Agent {
  id          String   @id @default(cuid())
  name        String
  type        AgentType
  status      AgentStatus @default(ACTIVE)
  capabilities Json?
  settings    Json?
  version     String   @default("1.0.0")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  executions  AgentExecution[]

  @@map("agents")
}

model AgentExecution {
  id          String   @id @default(cuid())
  agentId     String
  campaignId  String?
  userId      String?
  task        String
  payload     Json?
  result      Json?
  status      ExecutionStatus @default(PENDING)
  performance Float?
  error       String?
  startedAt   DateTime @default(now())
  completedAt DateTime?
  metadata    Json?

  // Relations
  agent       Agent    @relation(fields: [agentId], references: [id])
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@map("agent_executions")
}

// Analytics & Metrics
model Analytics {
  id          String   @id @default(cuid())
  campaignId  String?
  userId      String?
  type        AnalyticsType
  data        Json
  period      String?  // daily, weekly, monthly
  date        DateTime @default(now())
  metadata    Json?

  // Relations
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@map("analytics")
}

// A/B Testing
model ABTest {
  id          String   @id @default(cuid())
  campaignId  String
  name        String
  description String?
  status      ABTestStatus @default(RUNNING)
  variants    Json
  results     Json?
  winner      String?
  confidence  Float?
  startDate   DateTime @default(now())
  endDate     DateTime?
  settings    Json?

  // Relations
  campaign    Campaign @relation(fields: [campaignId], references: [id])

  @@map("ab_tests")
}

// Content Management
model Content {
  id          String   @id @default(cuid())
  title       String
  type        ContentType
  platform    Platform
  content     Json
  status      ContentStatus @default(DRAFT)
  performance Json?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("contents")
}

// Lead Management
model Lead {
  id          String   @id @default(cuid())
  email       String
  name        String?
  company     String?
  position    String?
  phone       String?
  source      String?
  status      LeadStatus @default(NEW)
  score       Float?
  tags        String[]
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("leads")
}

// Trend Analysis
model Trend {
  id          String   @id @default(cuid())
  keyword     String
  platform    Platform
  category    String?
  score       Float
  volume      Int?
  growth      Float?
  data        Json
  detectedAt  DateTime @default(now())

  @@map("trends")
}

// Design Templates
model DesignTemplate {
  id          String   @id @default(cuid())
  name        String
  category    String
  template    Json
  preview     String?
  tags        String[]
  usage       Int      @default(0)
  rating      Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("design_templates")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
  VIEWER
}

enum CampaignType {
  SOCIAL_MEDIA
  EMAIL
  ADS
  CONTENT
  INFLUENCER
  EVENT
  PRODUCT_LAUNCH
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum Platform {
  FACEBOOK
  INSTAGRAM
  TIKTOK
  TWITTER
  LINKEDIN
  YOUTUBE
  EMAIL
  WEBSITE
  SHOPIFY
  GOOGLE_ADS
  META_ADS
}

enum AgentType {
  CONTENT
  AD
  OUTREACH
  TREND
  INSIGHT
  DESIGN
  SUPPORT
}

enum AgentStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DEPRECATED
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum AnalyticsType {
  ENGAGEMENT
  REACH
  CONVERSION
  REVENUE
  CLICKS
  IMPRESSIONS
  SENTIMENT
  PERFORMANCE
}

enum ABTestStatus {
  DRAFT
  RUNNING
  COMPLETED
  STOPPED
}

enum ContentType {
  POST
  STORY
  REEL
  VIDEO
  EMAIL
  AD
  BLOG
  PRODUCT
}

enum ContentStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

// Support System
model SupportThread {
  id              String              @id @default(cuid())
  customerId      String?
  customerName    String?
  customerEmail   String?
  customerPhone   String?
  subject         String
  status          SupportStatus       @default(OPEN)
  priority        SupportPriority     @default(MEDIUM)
  category        String?
  channel         SupportChannel
  isAiAssisted    Boolean             @default(true)
  assignedAgentId String?
  tags            String[]
  metadata        Json?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  closedAt        DateTime?

  // Relations
  messages        MessageLog[]
  escalations     EscalationRequest[]
  customer        User?               @relation("CustomerSupport", fields: [customerId], references: [id])
  assignedAgent   User?               @relation("AssignedSupportAgent", fields: [assignedAgentId], references: [id])

  @@map("support_threads")
}

model MessageLog {
  id            String        @id @default(cuid())
  threadId      String
  senderId      String?
  senderType    SenderType
  senderName    String?
  content       String
  messageType   MessageType   @default(TEXT)
  attachments   Json?
  aiGenerated   Boolean       @default(false)
  aiConfidence  Float?
  isInternal    Boolean       @default(false)
  readAt        DateTime?
  metadata      Json?
  createdAt     DateTime      @default(now())

  // Relations
  thread        SupportThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender        User?         @relation("MessageSender", fields: [senderId], references: [id])

  @@map("message_logs")
}

model EscalationRequest {
  id            String            @id @default(cuid())
  threadId      String
  reason        EscalationReason
  description   String?
  requestedBy   String?
  assignedTo    String?
  status        EscalationStatus  @default(PENDING)
  priority      SupportPriority   @default(HIGH)
  resolvedAt    DateTime?
  resolution    String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  thread        SupportThread     @relation(fields: [threadId], references: [id], onDelete: Cascade)
  requester     User?             @relation("EscalationRequester", fields: [requestedBy], references: [id])
  assignee      User?             @relation("EscalationAssignee", fields: [assignedTo], references: [id])

  @@map("escalation_requests")
}

// Enums for Support System
enum SupportStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  WAITING_AGENT
  RESOLVED
  CLOSED
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SupportChannel {
  WEB_CHAT
  EMAIL
  WHATSAPP
  PHONE
  SOCIAL_MEDIA
}

enum SenderType {
  CUSTOMER
  AGENT
  AI_AGENT
  SYSTEM
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
  SYSTEM_NOTIFICATION
}

enum EscalationReason {
  COMPLEX_ISSUE
  CUSTOMER_REQUEST
  AI_LIMITATION
  TECHNICAL_ISSUE
  BILLING_DISPUTE
  COMPLAINT
  URGENT_MATTER
}

enum EscalationStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CANCELLED
} 